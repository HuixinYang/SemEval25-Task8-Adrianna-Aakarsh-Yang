# Instructions: Generate ONLY python code. Do not include explanations.  
# you can use pandas and numpy. Use the meta data information from df_schema, df_descprtion.
import pandas as pd
import numpy as np
from typing import List, Union

# Description of dataframe schema.
df_schema = {{ schema }}

# Description of dataframe columns.
df_descrption = {{ description }}

# Randome sample of 10 rows from the dataframe.
df_random_sample = {{ random_sample }}

'''
The question categories are:
    - boolean: Valid answers include True/False, Y/N, Yes/No (all case insensitive).
    - category: A value from a cell (or a substring of a cell) in the dataset.
    - number: A numerical value from a cell in the dataset, which may represent a computed statistic (e.g., average, maximum, minimum).
    - list[category]: A list containing a fixed number of categories. The expected format is: "['cat', 'dog']". Pay attention to the wording of the question to determine if uniqueness is required or if repeated values are allowed.
    - list[number]: Similar to list[category], but with numbers as its elements.
'''

# TODO: complete the following function in one line, by completing the return statement. It should give the answer to: How many rows are there in this dataframe?
def example(df: pd.DataFrame) -> Union[int, float] :
    df.columns=["A"]
    # Expected output type: is number, this will be checked.
    return df.shape[0]

# It should give the answer to: {{question}}
# The answer should only contain python code, you are not allowed leave any TODO undone.
def answer(df: pd.DataFrame) -> {{ return_type }}:
    # Use df to answer: {{ question }}
    df.columns = {{ columns }}
    # Expected output type: is {{ return_type }}, this will be checked.
    return